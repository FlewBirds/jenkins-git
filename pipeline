    pipeline{
        agent {
            node {
                label("docker")
                customWorkspace "/opt/workspace"
            }
        }
        stages{
            stage("My First Pipeline"){
                steps{
                   sh '''
                   echo "Hello This is my First Pipeline"
                    touch testfile
                    ls -lrth
                    '''
                }
            }
        }
    }
-------
// @Library('jenkins-shared-library')_
def datas
pipeline {
  agent any
  environment{
#      IS_UPGRADE = "${params.IS_UPGRADE}"
      ENVIRONMENT = "${params.ENVIRONMENT}"
      GIT_APP_REPO = "${params.GIT_APP_REPO}"
      GIT_BRANCH  =  "${params.GIT_BRANCH}"
      TARGET_HOST_IP   = "${params.TARGET_HOST_IP}"
        }
  stages {
      stage('Validation'){
          steps{
             script{
                 try{ 
                     sh 'docker ps'
                 }catch (Exception e) {
                     echo 'Exception Occurred' + e.toString()
                     error("Deplyment Failed as Docker service doesnot exists or not running on ${TARGET_HOST_IP}")
                 }
             } 
          }
      }      
      stage('Checkout Common Config Repo'){
          steps{
              checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '803e-b03c4ff64b81', url:'https://dat.mydummies.com/git/scm/da/ds-common-configuration.git']]])
          }
      }
      stage('Load Env Vars From Common Config Repo'){
          steps{
              script{
                load "sys-env-configs/${K8_ENVIRONMENT}"
              }
          }
      }
      stage('Checkout App Repo'){
          steps{
              checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '803e-b03c4ff64b81', url: "${GIT_APP_REPO}"]]])
            }
        }
      stage('Load Env Vars From App Repo'){
          steps{
              script{
                  load "common-config/config"
                  load "env-config/${K8_ENVIRONMENT}"
                  datas = readYaml file: "${HELM_APP_CONFIG_FOLDER}/${K8_ENVIRONMENT}.yaml"
              }
          }
       }
       stage('Test Tiller Host is up'){
          steps{
             script{
                   def return_code  = sh(script: "ds-check-tiller.py", returnStatus: true)
                   assert return_code == 0
              }
           }
       }
       stage('Check image exists'){
          steps{
             withCredentials([usernamePassword(credentialsId: '4829-a04a-118d19166999', passwordVariable: 'SERVICE_PRINCIPLE', usernameVariable: 'NOT_USED')]){
             script{
                   def return_code  = sh(script: "ds-check-image.py -f ${HELM_APP_CONFIG_FOLDER}/${K8_ENVIRONMENT}.yaml", returnStatus: true)
                   assert return_code == 0
                   }
               }
           }
       }
       stage('Check if Branch/Tags exists'){
          steps{
             withCredentials([usernamePassword(credentialsId: '4d53-803e-b03c4ff64b81', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]){

             script{
                   def return_code  = sh(script: "ds-check-git.py -f ${HELM_APP_CONFIG_FOLDER}/${K8_ENVIRONMENT}.yaml", returnStatus: true)
                   assert return_code == 0
                   }
               }
           }
       }
       stage('Setup'){
           steps{
               script{
                   sh 'ds-setup-env.py'
               }
           }
       }
       stage('Get Helm Package'){
           steps{
               script{
                   sh 'ds-get-helm-pkg.py'
               }
           }
       }
       stage('Check Namespace Exists'){
           steps{
               script{
                   sh 'ds-setup-k8-namespace.py'
               }
           }
       }
       stage('Setup Helm'){
           steps{
               wrap([$class: 'BuildUser']) {
                   script{
                       if (params.K8_ENVIRONMENT == 'prod-blue' || params.K8_ENVIRONMENT == 'prod-sam' || params.K8_ENVIRONMENT == 'prod-dr'){
                         // no slack right now - TODO Fix
                       } else {
                         // no slack right now - TODO Fix
                        //  slackNotifier.preDeploy(datas.image.tag)
                       }
                       sh 'ds-setup-helm.py'
                   }
               }
           }
       }
       stage('Deploy'){
           steps{
               script{
                   def return_code  = sh(script: "ds-deploy-helm-pkg.py", returnStatus: true)
                   assert return_code == 0
                }
            }
        }
    }
    post {
        always {
           wrap([$class: 'BuildUser']) {
              script{
                if (params.K8_ENVIRONMENT == 'prod-blue' || params.K8_ENVIRONMENT == 'prod-sam' || params.K8_ENVIRONMENT == 'prod-dr' ){
                     // no slack right now - TODO Fix
                } else {
                    // no slack right now - TODO Fix
                    // slackNotifier.postDeploy(currentBuild.currentResult, datas.image.tag)
                }       
              }
           }
        }
    }
}
